# -*- coding: utf-8 -*-
"""credit-card-fraud-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gK45E2orHVv6ePdnnr58a5TCInEiYU1W
"""

!pip install -q seaborn scikit-learn joblib

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import joblib

df = pd.read_csv('/content/creditcard.csv')

df.head()

df.info()

df.describe()

df.isnull().sum()

df.dropna(inplace=True)

print(df['Class'].value_counts())

sns.countplot(x='Class', data=df)
plt.title("Legit vs Fraud Transactions")
plt.xlabel("Class (0 = Legit, 1 = Fraud)")
plt.ylabel("Count")
plt.show()

scaler = StandardScaler()
df['normalizedAmount'] = scaler.fit_transform(df['Amount'].values.reshape(-1, 1))
df = df.drop(['Amount', 'Time'], axis=1)

X = df.drop('Class', axis=1)
y = df['Class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print("ROC AUC Score:", roc_auc_score(y_test, y_pred))

joblib.dump(model, 'fraud_model.pkl')

import gradio as gr
import joblib
import numpy as np

# Load the trained model
model = joblib.load("/content/fraud_model.pkl")

# Prediction function
def predict_fraud(*features):
    input_data = np.array(features).reshape(1, -1)
    prediction = model.predict(input_data)[0]
    return "‚ö†Ô∏è Fraudulent Transaction" if prediction == 1 else "‚úÖ Legitimate Transaction"

# Feature names (28 PCA components + normalizedAmount)
feature_names = [
    "V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10",
    "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20",
    "V21", "V22", "V23", "V24", "V25", "V26", "V27", "V28", "Normalized Amount"
]

# Define input components
inputs = [gr.Number(label=fn) for fn in feature_names]
output = gr.Textbox(label="Prediction")

# Build interface
app = gr.Interface(
    fn=predict_fraud,
    inputs=inputs,
    outputs=output,
    title="üí≥ Credit Card Fraud Detection",
    description="Enter values for V1 to V28 and Normalized Amount to predict fraud.",
    allow_flagging="never",
    live=True  # Enables "Clear" button
)

# Launch the app
app.launch()